Variables y operaciones
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es una variable y para qu√© sirve?
* Es un espacio en memoria al cual se le asigna algun valor que se usara dentro del programa
¬øCu√°l es la diferencia entre declarar e inicializar una variable?
* Declarar solo se crea el espacio en memoria, inicializar le asignamos un valor a ese espacio en memoria
¬øCu√°l es la diferencia entre sumar n√∫meros y concatenar strings?
* Sumar numeros se realiza la operacion matematica, concatenar es unir dos frases de texto para convertirlas en una sola.
¬øCu√°l operador me permite sumar o concatenar?
* Signo +

2Ô∏è‚É£ Determina el nombre y tipo de dato para almacenar en variables la siguiente informaci√≥n:

    let nombre = 'string';
    let apellido = 'string';
    let usuarioPlatzi = 'string';
    let edad = number;
    let email = 'string';
    let mayorDeEdad = boolean;
    let dineroAhorrado = number;
    let deudas = number;

3Ô∏è‚É£ Traduce a c√≥digo JavaScript las variables del ejemplo anterior y deja tu c√≥digo en los comentarios.
    let nombre = 'David';
    let apellido = 'Gaona';
    let usuarioPlatzi = 'DavGao';
    let edad = 20;
    let email = 'david@gmail.com';
    let mayorDeEdad = true;
    let dineroAhorrado = 0;
    let deudas = 2870000;

4Ô∏è‚É£ Calcula e imprime las siguientes variables a partir de las variables del ejemplo anterior:
    Nombre completo (nombre y apellido)
    Dinero real (dinero ahorrado menos deudas)

    let nombreCompleto = nombre + apellido;
    console.log(nombreCompleto);
    let dineroReal = dineroAhorrado - deudas;
    console.log(dineroReal);

Funciones

1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es una funci√≥n?
* Es una seccion de codigo reservada para un fin en especial
¬øCu√°ndo me sirve usar una funci√≥n en mi c√≥digo?
* Cuando requerimos mas de una vez utilizar algun procedimiento del codigo
¬øCu√°l es la diferencia entre par√°metros y argumentos de una funci√≥n?
* Parametro es una variable que est√° en la definici√≥n de una funci√≥n, 
  argumento son los datos que se le pasan a los parametros de una funci√≥n.

2Ô∏è‚É£ Convierte el siguiente c√≥digo en una funci√≥n, pero, cambiando cuando sea necesario las variables constantes por par√°metros 
    y argumentos en una funci√≥n:

    const name = "Juan David";
    const lastname = "Castro Gallego";
    const completeName = name + lastname;
    const nickname = "juandc";

    console.log("Mi nombre es " + completeName + ", pero prefiero que me digas " + nickname + ".");

    *************************

    var x = myFunction("David", "Gaona", "DavidG");


    function myFunction(nombre, apellido, apodo) {
    return "Mi nombre es " + nombre + " " + apellido + ", pero prefiero que me digas " + apodo + ".";
    }
    document.getElementById("demo").innerHTML = x;

Condicionales

1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es una condicional?
* Es una expresion donde se analizara si cumple o no una norma para continuar el codigo. 
¬øQu√© tipos de condicionales existen en JavaScript y cu√°les son sus diferencias?
* If, else if, switch. If y else, se utiliza para validar una expresion si cumple o no, switch lo usamos para que se elija entre varios 
  casos que s epeudan plantear.
¬øPuedo combinar funciones y condicionales?
* Si.

2Ô∏è‚É£ Replica el comportamiento del siguiente c√≥digo que usa la sentencia switch utilizando if, else y else if:

    const tipoDeSuscripcion = "Basic";

    switch (tipoDeSuscripcion) {
    case "Free":
        console.log("Solo puedes tomar los cursos gratis");
        break;
    case "Basic":
        console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
        break;
    case "Expert":
        console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
        break;
    case "ExpertPlus":
        console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
        break;
    }
    ***********************
    const tipoDeSuscripcion = "Basic";

    if(tipoDeSuscripcion === "Free"){
        console.log("Solo puedes tomar los cursos gratis");
    } else if(tipoDeSuscripcion === "Basic"){
        console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
    } else if(tipoDeSuscripcion === "Expert"){
        console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
    } else if(tipoDeSuscripcion === "ExpertPlus"){
        console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
    }

3Ô∏è‚É£ Replica el comportamiento de tu condicional anterior con if, else y else if, pero ahora solo con if (sin else ni else if).

    const tipoDeSuscripcion = "Basic";

    if(tipoDeSuscripcion === "Free"){
        console.log("Solo puedes tomar los cursos gratis");
    } 
    if(tipoDeSuscripcion === "Basic"){
        console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
    }
    if(tipoDeSuscripcion === "Expert"){
        console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
    } 
    if(tipoDeSuscripcion === "ExpertPlus"){
        console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
    }

Bonus: si ya eres una experta o experto en el lenguaje, te desaf√≠o a comentar c√≥mo replicar este comportamiento con arrays 
y un solo condicional. üòè

    const tipoDeSuscripcion = ["Free", "Basic", "Expert", "ExpertPlus"];
    const respuestas = ["Solo puedes tomar los cursos gratis", "Puedes tomar casi todos los cursos de Platzi durante un mes", "Puedes tomar casi todos los cursos de Platzi durante un a√±o", "T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o"];
    const suscripcion = tipoDeSuscripcion[1];
    if(suscripcion == "Basic"){
        document.getElementById("demo").innerHTML = respuestas[1];

Ciclos
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es un ciclo?
* Es una seccion de codigo que se ejecutar√° varias veces hasta que no cumpla la condicion
¬øQu√© tipos de ciclos existen en JavaScript?
* For, while, dowhile
¬øQu√© es un ciclo infinito y por qu√© es un problema?
* Es un codigo que se ejecutara sin final, es un problema porque puede afectar el rendimiento de la aplicacion, o simplemente bloquearla
¬øPuedo mezclar ciclos y condicionales?
* Si

2Ô∏è‚É£ Replica el comportamiento de los siguientes ciclos for utilizando ciclos while:

    for (let i = 0; i < 5; i++) {
        console.log("El valor de i es: " + i);
    }
    for (let i = 10; i >= 2; i--) {
        console.log("El valor de i es: " + i);
    }
    ******************************************
    let i = 0;
    while(i < 5){
        console.log("El valor de i es: " + i);
        i++;
    }
    let i = 10;
    while(i >= 2){
        console.log("El valor de i es: " + i);
        i--;
    }

3Ô∏è‚É£ Escribe un c√≥digo en JavaScript que le pregunte a los usuarios cu√°nto es 2 + 2. Si responden bien, mostramos un mensaje de 
felicitaciones, pero si responden mal, volvemos a empezar.

Pista: puedes usar la funci√≥n prompt de JavaScript.

    function myFunction() {
    let respuesta = 0;
    do {
        respuesta = prompt('¬øCual es el resultado de 2 + 2?')
        respuesta *= 1;
    } while (!(respuesta === 4))
    console.log("Felicitaciones, respuesta corrrecta");
    }

Listas
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es un array?
* Es un contenedor que almacena informacion
¬øQu√© es un objeto?
* Es un conjunto de prpiedades
¬øCu√°ndo es mejor usar objetos o arrays?
* Cuando tenemos que asignar valores dentro el rupo que tenemos
¬øPuedo mezclar arrays con objetos o incluso objetos con arrays?
* Si

2Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima su primer elemento.

    let array["Valor 1", "Valor 2", "Valor 3"];

    function myFunction(array) {
    return "El valor de devolver es " + array[0];
    }
   

3Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima todos sus elementos uno por uno (no se vale imprimir el array completo).

    const array1 = ['a', 'b', 'c'];

    function myFunction(array1){
        array1.forEach(element => console.log(element));
    }
    myFunction(array1);

4Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier objeto como par√°metro e imprima todos sus elementos uno por uno (no se vale imprimir el objeto completo).

    const carro = {
        marca: 'renault', 
        color: 'negro', 
        cilindraje: 1000 
    };
    
    function myFunction(carros){
        Object.values(carros).forEach(element => console.log(element));
    }
    myFunction(carro);